"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enable = exports.enabled = exports.createContextStore = exports.CompilerContext = void 0;
class CompilerContext {
    shared = {};
    constructor(args = { shared: {} }) {
        this.shared = args.shared;
        Object.freeze(this.shared);
        Object.freeze(this);
    }
    addShared = (store, key, value) => {
        let sh = {};
        if (this.shared[store]) {
            sh = { ...this.shared[store] };
        }
        sh[key] = value;
        return new CompilerContext({ shared: { ...this.shared, [store]: sh } });
    };
}
exports.CompilerContext = CompilerContext;
function createContextStore() {
    let symbol = Symbol();
    return {
        get(ctx, key) {
            if (!ctx.shared[symbol]) {
                return null;
            }
            let m = ctx.shared[symbol];
            if (m[key]) {
                return m[key];
            }
            else {
                return null;
            }
        },
        all(ctx) {
            if (!ctx.shared[symbol]) {
                return {};
            }
            let m = ctx.shared[symbol];
            return m;
        },
        set(ctx, key, v) {
            return ctx.addShared(symbol, key, v);
        }
    };
}
exports.createContextStore = createContextStore;
const featureStore = createContextStore();
function enabled(ctx, key) {
    let r = featureStore.get(ctx, key);
    if (r === null) {
        return false;
    }
    return r;
}
exports.enabled = enabled;
function enable(ctx, key) {
    return featureStore.set(ctx, key, true);
}
exports.enable = enable;
