import { z } from "zod";
declare const projectSchema: z.ZodObject<{
    name: z.ZodString;
    path: z.ZodString;
    output: z.ZodString;
    contracts: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    parameters: z.ZodOptional<z.ZodObject<{
        debug: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        debug?: boolean | undefined;
    }, {
        debug?: boolean | undefined;
    }>>;
    experimental: z.ZodOptional<z.ZodObject<{
        inline: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        inline?: boolean | undefined;
    }, {
        inline?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    contracts?: string[] | undefined;
    parameters?: {
        debug?: boolean | undefined;
    } | undefined;
    experimental?: {
        inline?: boolean | undefined;
    } | undefined;
    name: string;
    path: string;
    output: string;
}, {
    contracts?: string[] | undefined;
    parameters?: {
        debug?: boolean | undefined;
    } | undefined;
    experimental?: {
        inline?: boolean | undefined;
    } | undefined;
    name: string;
    path: string;
    output: string;
}>;
declare const configSchema: z.ZodObject<{
    projects: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        path: z.ZodString;
        output: z.ZodString;
        contracts: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        parameters: z.ZodOptional<z.ZodObject<{
            debug: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            debug?: boolean | undefined;
        }, {
            debug?: boolean | undefined;
        }>>;
        experimental: z.ZodOptional<z.ZodObject<{
            inline: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            inline?: boolean | undefined;
        }, {
            inline?: boolean | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        contracts?: string[] | undefined;
        parameters?: {
            debug?: boolean | undefined;
        } | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
        name: string;
        path: string;
        output: string;
    }, {
        contracts?: string[] | undefined;
        parameters?: {
            debug?: boolean | undefined;
        } | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
        name: string;
        path: string;
        output: string;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    projects: {
        contracts?: string[] | undefined;
        parameters?: {
            debug?: boolean | undefined;
        } | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
        name: string;
        path: string;
        output: string;
    }[];
}, {
    projects: {
        contracts?: string[] | undefined;
        parameters?: {
            debug?: boolean | undefined;
        } | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
        name: string;
        path: string;
        output: string;
    }[];
}>;
export type Config = z.infer<typeof configSchema>;
export type ConfigProject = z.infer<typeof projectSchema>;
export declare function parseConfig(src: string): {
    projects: {
        contracts?: string[] | undefined;
        parameters?: {
            debug?: boolean | undefined;
        } | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
        name: string;
        path: string;
        output: string;
    }[];
};
export {};
