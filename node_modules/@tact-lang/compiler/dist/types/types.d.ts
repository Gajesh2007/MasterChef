import { ABIField } from "ton-core";
import { ASTFunction, ASTInitFunction, ASTNativeFunction, ASTNode, ASTReceive, ASTRef, ASTStatement, ASTType } from "../grammar/ast";
export type TypeDescription = {
    kind: 'struct' | 'primitive' | 'contract' | 'trait';
    name: string;
    uid: number;
    header: number | null;
    tlb: string | null;
    signature: string | null;
    fields: FieldDescription[];
    traits: TypeDescription[];
    functions: Map<string, FunctionDescription>;
    receivers: ReceiverDescription[];
    init: InitDescription | null;
    ast: ASTType;
    dependsOn: TypeDescription[];
    interfaces: string[];
    constants: ConstantDescription[];
};
export type TypeRef = {
    kind: 'ref';
    name: string;
    optional: boolean;
} | {
    kind: 'map';
    key: string;
    value: string;
} | {
    kind: 'void';
} | {
    kind: 'null';
};
export type FieldDescription = {
    name: string;
    index: number;
    type: TypeRef;
    as: string | null;
    default: bigint | boolean | string | null | undefined;
    ref: ASTRef;
    ast: ASTNode;
    abi: ABIField;
};
export type ConstantDescription = {
    name: string;
    type: TypeRef;
    value: bigint | boolean | string | null;
    ref: ASTRef;
    ast: ASTNode;
};
export type FunctionArgument = {
    name: string;
    type: TypeRef;
    as: string | null;
    ref: ASTRef;
};
export type FunctionDescription = {
    name: string;
    isPublic: boolean;
    isGetter: boolean;
    isMutating: boolean;
    isOverwrites: boolean;
    isVirtual: boolean;
    self: string | null;
    returns: TypeRef;
    args: FunctionArgument[];
    ast: ASTFunction | ASTNativeFunction;
};
export type StatementDescription = {
    kind: 'native';
    src: ASTStatement;
} | {
    kind: 'intrinsic';
};
export type ReceiverSelector = {
    kind: 'internal-binary';
    type: string;
    name: string;
} | {
    kind: 'internal-empty';
} | {
    kind: 'internal-comment';
    comment: string;
} | {
    kind: 'internal-comment-fallback';
    name: string;
} | {
    kind: 'internal-fallback';
    name: string;
} | {
    kind: 'internal-bounce';
    name: string;
};
export type ReceiverDescription = {
    selector: ReceiverSelector;
    ast: ASTReceive;
};
export type InitDescription = {
    args: FunctionArgument[];
    ast: ASTInitFunction;
};
export declare function printTypeRef(src: TypeRef): string;
export declare function typeRefEquals(a: TypeRef, b: TypeRef): boolean;
