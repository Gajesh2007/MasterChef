"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalFunctions = void 0;
const ton_core_1 = require("ton-core");
const config_1 = require("../config");
const writeExpression_1 = require("../generator/writers/writeExpression");
const ast_1 = require("../grammar/ast");
const resolveConstantValue_1 = require("../types/resolveConstantValue");
const resolveStrings_1 = require("../types/resolveStrings");
exports.GlobalFunctions = {
    ton: {
        name: 'ton',
        resolve: (ctx, args, ref) => {
            if (args.length !== 1) {
                (0, ast_1.throwError)('ton() expects single string argument', ref);
            }
            if (args[0].kind !== 'ref') {
                (0, ast_1.throwError)('ton() expects single string argument', ref);
            }
            if (args[0].name !== 'String') {
                (0, ast_1.throwError)('ton() expects single string argument', ref);
            }
            return { kind: 'ref', name: 'Int', optional: false };
        },
        generate: (ctx, args, resolved, ref) => {
            if (resolved.length !== 1) {
                (0, ast_1.throwError)('ton() expects single string argument', ref);
            }
            let str = (0, resolveConstantValue_1.resolveConstantValue)({ kind: 'ref', name: 'String', optional: false }, resolved[0]);
            return (0, ton_core_1.toNano)(str).toString(10);
        }
    },
    require: {
        name: 'require',
        resolve: (ctx, args, ref) => {
            if (args.length !== 2) {
                (0, ast_1.throwError)('require() expects two arguments', ref);
            }
            if (args[0].kind !== 'ref') {
                (0, ast_1.throwError)('require() expects first Bool argument', ref);
            }
            if (args[0].name !== 'Bool') {
                (0, ast_1.throwError)('require() expects first Bool argument', ref);
            }
            if (args[1].kind !== 'ref') {
                (0, ast_1.throwError)('require() expects second string argument', ref);
            }
            if (args[1].name !== 'String') {
                (0, ast_1.throwError)('require() expects second string argument', ref);
            }
            return { kind: 'void' };
        },
        generate: (ctx, args, resolved, ref) => {
            if (resolved.length !== 2) {
                (0, ast_1.throwError)('require() expects two arguments', ref);
            }
            let str = (0, resolveConstantValue_1.resolveConstantValue)({ kind: 'ref', name: 'String', optional: false }, resolved[1]);
            return `throw_unless(${(0, resolveStrings_1.getErrorId)(str, ctx.ctx)}, ${(0, writeExpression_1.writeExpression)(resolved[0], ctx)})`;
        }
    },
    dump: {
        name: 'dump',
        resolve: (ctx, args, ref) => {
            if (args.length !== 1) {
                (0, ast_1.throwError)('dump expects 1 argument', ref);
            }
            return { kind: 'void' };
        },
        generate: (ctx, args, resolved, ref) => {
            if (!(0, config_1.enabledDebug)(ctx.ctx)) {
                return `${ctx.used('__tact_nop')}()`;
            }
            let arg = args[0];
            if (arg.kind === 'map') {
                let exp = (0, writeExpression_1.writeExpression)(resolved[0], ctx);
                return `${ctx.used(`__tact_debug`)}(${exp})`;
            }
            else if (arg.kind === 'null') {
                return `${ctx.used(`__tact_debug_str`)}("null")`;
            }
            else if (arg.kind === 'void') {
                return `${ctx.used(`__tact_debug_str`)}("void")`;
            }
            else if (arg.kind === 'ref') {
                if (arg.name === 'Int' || arg.name === 'Builder' || arg.name === 'Slice' || arg.name === 'Cell' || arg.name === 'StringBuilder') {
                    let exp = (0, writeExpression_1.writeExpression)(resolved[0], ctx);
                    return `${ctx.used(`__tact_debug_str`)}(${ctx.used(`__tact_int_to_string`)}(${exp}))`;
                }
                else if (arg.name === 'Bool') {
                    let exp = (0, writeExpression_1.writeExpression)(resolved[0], ctx);
                    return `${ctx.used(`__tact_debug_bool`)}(${exp})`;
                }
                else if (arg.name === 'String') {
                    let exp = (0, writeExpression_1.writeExpression)(resolved[0], ctx);
                    return `${ctx.used(`__tact_debug_str`)}(${exp})`;
                }
                (0, ast_1.throwError)('dump() not supported for type: ' + arg.name, ref);
            }
            else {
                (0, ast_1.throwError)('dump() not supported for argument', ref);
            }
        }
    },
    emptyMap: {
        name: 'emptyMap',
        resolve: (ctx, args, ref) => {
            if (args.length !== 0) {
                (0, ast_1.throwError)('emptyMap expects no arguments', ref);
            }
            return { kind: 'null' };
        },
        generate: (ctx, args, resolved, ref) => {
            return 'null()';
        }
    }
};
