"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DDDD = exports.loadSendParameters = exports.storeSendParameters = exports.loadContext = exports.storeContext = exports.loadStateInit = exports.storeStateInit = void 0;
const ton_core_1 = require("ton-core");
function storeStateInit(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}
exports.storeStateInit = storeStateInit;
function loadStateInit(slice) {
    let sc_0 = slice;
    let _code = sc_0.loadRef();
    let _data = sc_0.loadRef();
    return { $$type: 'StateInit', code: _code, data: _data };
}
exports.loadStateInit = loadStateInit;
function loadTupleStateInit(source) {
    let _code = source.readCell();
    let _data = source.readCell();
    return { $$type: 'StateInit', code: _code, data: _data };
}
function storeTupleStateInit(source) {
    let builder = new ton_core_1.TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}
function dictValueParserStateInit() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, ton_core_1.beginCell)().store(storeStateInit(src)).endCell());
        },
        parse: (src) => {
            return loadStateInit(src.loadRef().beginParse());
        }
    };
}
function storeContext(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}
exports.storeContext = storeContext;
function loadContext(slice) {
    let sc_0 = slice;
    let _bounced = sc_0.loadBit();
    let _sender = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _raw = sc_0.loadRef();
    return { $$type: 'Context', bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}
exports.loadContext = loadContext;
function loadTupleContext(source) {
    let _bounced = source.readBoolean();
    let _sender = source.readAddress();
    let _value = source.readBigNumber();
    let _raw = source.readCell();
    return { $$type: 'Context', bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}
function storeTupleContext(source) {
    let builder = new ton_core_1.TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}
function dictValueParserContext() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, ton_core_1.beginCell)().store(storeContext(src)).endCell());
        },
        parse: (src) => {
            return loadContext(src.loadRef().beginParse());
        }
    };
}
function storeSendParameters(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) {
            b_0.storeBit(true).storeRef(src.body);
        }
        else {
            b_0.storeBit(false);
        }
        if (src.code !== null && src.code !== undefined) {
            b_0.storeBit(true).storeRef(src.code);
        }
        else {
            b_0.storeBit(false);
        }
        if (src.data !== null && src.data !== undefined) {
            b_0.storeBit(true).storeRef(src.data);
        }
        else {
            b_0.storeBit(false);
        }
    };
}
exports.storeSendParameters = storeSendParameters;
function loadSendParameters(slice) {
    let sc_0 = slice;
    let _bounce = sc_0.loadBit();
    let _to = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _mode = sc_0.loadIntBig(257);
    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters', bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}
exports.loadSendParameters = loadSendParameters;
function loadTupleSendParameters(source) {
    let _bounce = source.readBoolean();
    let _to = source.readAddress();
    let _value = source.readBigNumber();
    let _mode = source.readBigNumber();
    let _body = source.readCellOpt();
    let _code = source.readCellOpt();
    let _data = source.readCellOpt();
    return { $$type: 'SendParameters', bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}
function storeTupleSendParameters(source) {
    let builder = new ton_core_1.TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}
function dictValueParserSendParameters() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, ton_core_1.beginCell)().store(storeSendParameters(src)).endCell());
        },
        parse: (src) => {
            return loadSendParameters(src.loadRef().beginParse());
        }
    };
}
function initDDDD_init_args(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeAddress(src.addr1);
        b_0.storeAddress(src.addr2);
        b_0.storeAddress(src.addr3);
    };
}
async function DDDD_init(addr1, addr2, addr3) {
    const __code = ton_core_1.Cell.fromBase64('te6ccgECDwEAAkAAART/APSkE/S88sgLAQIBYgIDAgLNBAUCASAICQLf0A6GmBgLjYYADIv8i4cQD9IBEoKreCfDD2omhqAPwxaQAAxwp9IACA/SAAgP0gAID6AnoCKqA2CsdJfSAAgP0gAID9IAChmAHorG2ecSqKbZ4YZHwhAOY/gOUAKqAoKmeLLGeLAOeLCXoAegBk9qpA0GACNohbpVbWfRZMODIAc8AQTP0QYBPHAh10nCH5UwINcLH94Cklt/4AHAAAHXScEhsOMCcAcA7gGBAQFwJiBulTBZ9FowlEEz9BTigQEBcSUgbpUwWfRaMJRBM/QU4oEBAXIkIG6VMFn0WjCUQTP0FOKBAQFzJiBulTBZ9FowlEEz9BTiAYEBCyVwgQEB8AaBAQskcYEBAfAGgQELI3KBAQHwBoEBCyVzgQEB8AZ/Ane8FPdqJoagD8MWkAAMcKfSAAgP0gAID9IACA+gJ6AiqgNgrHSX0gAID9IACA/SAAoZgB6KxtnnEqgm2eQNCgIBIAsMADBsQoEBCwGBAQFBM/QKb6GUAdcAMJJbbeIAlbu9GCcFzsPV0srnsehOw51kqFG2aCcJ3WNS0rZHyzItOvLf3xYjmCcCBVwBuAZ2OUzlg6rkclssOCcBvUne+VRZbxx1PT3gVZwyaAJ3uVw+1E0NQB+GLSAAGOFPpAAQH6QAEB+kABAfQE9ARVQGwVjpL6QAEB+kABAfpAAUMwA9FY2zziVQTbPIDQ4ABG1tACAxMjOBAQEyWfQMb6GSMG3f');
    const __system = ton_core_1.Cell.fromBase64('te6cckECEQEAAkoAAQHAAQEFoViRAgEU/wD0pBP0vPLICwMCAWILBAIBIAkFAgEgCAYCd7lcPtRNDUAfhi0gABjhT6QAEB+kABAfpAAQH0BPQEVUBsFY6S+kABAfpAAQH6QAFDMAPRWNs84lUE2zyBAHACAxMjOBAQEyWfQMb6GSMG3fAJW7vRgnBc7D1dLK57HoTsOdZKhRtmgnCd1jUtK2R8syLTry398WI5gnAgVcAbgGdjlM5YOq5HJbLDgnAb1J3vlUWW8cdT094FWcMmgCd7wU92omhqAPwxaQAAxwp9IACA/SAAgP0gAID6AnoCKqA2CsdJfSAAgP0gAID9IAChmAHorG2ecSqCbZ5BAKADBsQoEBCwGBAQFBM/QKb6GUAdcAMJJbbeICAs0NDAAjaIW6VW1n0WTDgyAHPAEEz9EGAt/QDoaYGAuNhgAMi/yLhxAP0gESgqt4J8MPaiaGoA/DFpAADHCn0gAID9IACA/SAAgPoCegIqoDYKx0l9IACA/SAAgP0gAKGYAeisbZ5xKoptnhhkfCEA5j+A5QAqoCgqZ4ssZ4sA54sJegB6AGT2qkEA4BPHAh10nCH5UwINcLH94Cklt/4AHAAAHXScEhsOMCcA8A7gGBAQFwJiBulTBZ9FowlEEz9BTigQEBcSUgbpUwWfRaMJRBM/QU4oEBAXIkIG6VMFn0WjCUQTP0FOKBAQFzJiBulTBZ9FowlEEz9BTiAYEBCyVwgQEB8AaBAQskcYEBAfAGgQELI3KBAQHwBoEBCyVzgQEB8AZ/AARtbXiYz8k=');
    let builder = (0, ton_core_1.beginCell)();
    builder.storeRef(__system);
    builder.storeUint(0, 1);
    initDDDD_init_args({ $$type: 'DDDD_init_args', addr1, addr2, addr3 })(builder);
    const __data = builder.endCell();
    return { code: __code, data: __data };
}
const DDDD_errors = {
    2: { message: `Stack undeflow` },
    3: { message: `Stack overflow` },
    4: { message: `Integer overflow` },
    5: { message: `Integer out of expected range` },
    6: { message: `Invalid opcode` },
    7: { message: `Type check error` },
    8: { message: `Cell overflow` },
    9: { message: `Cell underflow` },
    10: { message: `Dictionary error` },
    13: { message: `Out of gas error` },
    32: { message: `Method ID not found` },
    34: { message: `Action is invalid or not supported` },
    37: { message: `Not enough TON` },
    38: { message: `Not enough extra-currencies` },
    128: { message: `Null reference exception` },
    129: { message: `Invalid serialization prefix` },
    130: { message: `Invalid incoming message` },
    131: { message: `Constraints error` },
    132: { message: `Access denied` },
    133: { message: `Contract stopped` },
    134: { message: `Invalid argument` },
    135: { message: `Code of a contract was not found` },
    136: { message: `Invalid address` },
};
class DDDD {
    static async init(addr1, addr2, addr3) {
        return await DDDD_init(addr1, addr2, addr3);
    }
    static async fromInit(addr1, addr2, addr3) {
        const init = await DDDD_init(addr1, addr2, addr3);
        const address = (0, ton_core_1.contractAddress)(0, init);
        return new DDDD(address, init);
    }
    static fromAddress(address) {
        return new DDDD(address);
    }
    address;
    init;
    abi = {
        errors: DDDD_errors
    };
    constructor(address, init) {
        this.address = address;
        this.init = init;
    }
    async send(provider, via, args, message) {
        let body = null;
        if (message === null) {
            body = new ton_core_1.Cell();
        }
        if (body === null) {
            throw new Error('Invalid message type');
        }
        await provider.internal(via, { ...args, body: body });
    }
    async getMapDataAddr1(provider, key) {
        let builder = new ton_core_1.TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('mapData_addr1', builder.build())).stack;
        let result = source.readAddressOpt();
        return result;
    }
    async getMapData2Addr1(provider, key) {
        let builder = new ton_core_1.TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('mapData2_addr1', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
}
exports.DDDD = DDDD;
